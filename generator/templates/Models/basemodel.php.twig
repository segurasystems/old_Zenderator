<?php
namespace {{ namespace }}\Models\Base;
use \{{ app_container }} as App;
use \{{ namespace }}\{{ namespace }};
use \Segura\AppCore\Exceptions;
use \Segura\AppCore\Abstracts\Model as AbstractModel;
use \Segura\AppCore\Interfaces\ModelInterface as ModelInterface;
use \{{ namespace }}\Services;
use \{{ namespace }}\Models;
use \{{ namespace }}\TableGateways;
use \{{ namespace }}\Models\{{ class_name }}Model;

{% include '_overwrite_warning.twig' %}

abstract class Base{{ class_name }}Model
    extends AbstractModel
    implements ModelInterface
{

    // Declare what fields are available on this object
{% for column in columns %}
    const FIELD_{{ column.getField|upper }} = '{{ column.getField }}';
{% endfor %}

{% for column in columns %}
    const TYPE_{{ column.getField|upper }} = '{{ column.getDbType }}';
{% endfor %}

    // Constants defined by ENUMs
{% for column in columns %}
{% if column.getDbType == 'enum' and column.getPhpType == 'string' %}
{% for permittedValue in column.getPermittedValues %}
    const {{ column.getField|upper }}_{{ permittedValue|upper }} = '{{ permittedValue }}';
{% endfor %}
{% endif %}
{% endfor %}

{% if primary_keys %}
    protected $_primary_keys = ['{{ primary_keys|join('\', \'')|raw }}'];
{% endif %}

{% if autoincrement_keys %}
    protected $_autoincrement_keys = ['{{ autoincrement_keys|join('\', \'')|raw }}'];
{% endif %}

{% for column in columns %}
{% if column.default_value %}
    protected ${{ column.getField }} = '{{ column.default_value }}';
{% else %}
    protected ${{ column.getField }};
{% endif %}
{% endfor %}

    /**
     * @param array $data An array of a {{ class_name }}Model's properties.
     * @returns {{ class_name }}Model
     */
    static public function factory(array $data = [])
    {
        return parent::factory($data);
    }

    /**
     * @returns array
     */
    public function getPropertyMeta()
    {
{% for column in columns %}
{% if column.hasRelatedObjects %}
        ${{ column.getField|replace({"Id":"s"}) }}Service = App::Container()->get(Services\{{ column.getField|replace({"Id":"s"})|transform_camel_to_studly }}Service::class);
{% endif %}
{% endfor %}

        $properties = [
{% for column in columns %}
            self::FIELD_{{ column.getField|upper }} => [
                    'type' => self::TYPE_{{ column.getField|upper }},
{% if column.getMaxLength > 0 %}
                    'length' => {{ column.getMaxLength }},
{% endif %}
{% if column.getDbType == 'enum' and column.getPhpType == 'string' %}
                    'options' => [
{% for permittedValue in column.getPermittedValues %}
                        '{{ permittedValue }}',
{% endfor %}
                    ],
{% if column.getDefaultvalue %}
                    'default' => '{{ column.getDefaultValue() }}',
{% endif %}
{% endif %}
{% if column.hasRelatedObjects %}
                    'remoteOptionsLoader' => ${{ column.getField|replace({"Id":"s"}) }}Service->getAll(),
{% endif %}
                ],
{% endfor %}
        ];
        return $properties;
    }

{% for column in columns %}
    /**
     * @returns {{ column.phptype }}
     */
    public function get{{ column.getPropertyFunction }}() {% if column.phptype %}{# Sadly can't use this until nullable return types turns up. : {{ column.phptype }} #}{% endif %}
    {
        return $this->{{ column.getField }};
    }

    /**
     * @param {{ column.phptype }} ${{ column.getField }}
     * @returns {{ class_name }}Model
     */
    public function set{{ column.getPropertyFunction }}({{ column.phptype }} ${{ column.getField }} = null)
    {
        $this->{{ column.getField }} = ${{ column.getField }};
        return $this;
    }

{% endfor %}

    /*****************************************************
     * "Referenced To" Remote Constraint Object Fetchers *
     *****************************************************/
{% for related_object in related_objects %}
    /**
     * @returns Models\{{ related_object.getRemoteClass }}Model
     */
    public function fetch{{ related_object.getRemoteFunctionName }}Object() : ?Models\{{ related_object.getRemoteClass }}Model
    {
        /** @var ${{ related_object.getRemoteClass }}Service Services\{{ related_object.getRemoteClass }}Service */
        ${{ related_object.getRemoteClass }}Service = App::Container()->get(Services\{{ related_object.getRemoteClass }}Service::class);
{% if related_object.getRemoteBoundColumn == 'id' %}
        return ${{ related_object.getRemoteClass }}Service->getById($this->{{ related_object.getLocalBoundColumnGetter }}());
{% else %}
        return ${{ related_object.getRemoteClass }}Service->getByField('{{ related_object.getRemoteBoundColumn }}', $this->{{ related_object.getLocalBoundColumnGetter }}());
{% endif %}
    }

{% endfor %}

{% if remote_objects %}
    /*****************************************************
     * "Referenced By" Remote Constraint Object Fetchers *
     *****************************************************/
{% for remote_object in remote_objects %}
    /**
     * @param $orderBy string Column to order by. Recommended to use the Constants in Models\{{ remote_object.getLocalClass }}Model::
     * @param $orderDirection string Either "DESC" or "ASC". Recommend using Select::ORDER_ASCENDING or Select::ORDER_DESCENDING
     *
     * @returns Models\{{ remote_object.getLocalClass }}Model
     */
    public function fetch{{ remote_object.getLocalFunctionName }}Object(
{% if remote_object.local_model_key != 'id' %}
        $orderBy = null,
        $orderDirection='ASC'
{% endif %}
    ) : ?Models\{{ remote_object.getLocalClass }}Model {
        /** @var ${{ remote_object.getLocalVariable }}Service Services\{{ remote_object.getLocalClass }}Service */
        ${{ remote_object.getLocalVariable }}Service = App::Container()->get(Services\{{ remote_object.getLocalClass }}Service::class);
{% if remote_object.local_model_key == 'id' %}
        return ${{ remote_object.getLocalVariable }}Service->getById($this->{{ column.getLocalBoundColumnGetter }}());
{% else %}
        return ${{ remote_object.getLocalVariable }}Service->getByField('{{ remote_object.getLocalBoundColumn }}', $this->{{ remote_object.getRemoteBoundColumnGetter }}(), $orderBy, $orderDirection);
{% endif %}
    }

    /**
     * @param $limit int Number to fetch maximum
     * @param $orderBy string Column to order by. Recommended to use the Constants in Models\{{ remote_object.getLocalClass }}Model::
     * @param $orderDirection string Either "DESC" or "ASC". Recommend using Select::ORDER_ASCENDING or Select::ORDER_DESCENDING
     *
     * @returns Models\{{ remote_object.getLocalClass }}Model[]
     */
    public function fetch{{ remote_object.getLocalFunctionName }}Objects(
        int $limit = null,
        string $orderBy = null,
        string $orderDirection='ASC'
    ) : ?array {
        /** @var ${{ remote_object.getLocalVariable }}Service Services\{{ remote_object.getLocalClass }}Service */
        ${{ remote_object.getLocalVariable }}Service = App::Container()->get(Services\{{ remote_object.getLocalClass }}Service::class);
{% if remote_object.local_model_key == 'id' %}
        return ${{ remote_object.getLocalVariable }}Service->getManyById($this->{{ column.getLocalBoundColumnGetter }}(), $orderBy, $orderDirection);
{% else %}
        return ${{ remote_object.getLocalVariable }}Service->getManyByField('{{ remote_object.getLocalBoundColumn }}', $this->{{ remote_object.getRemoteBoundColumnGetter }}(), $limit, $orderBy, $orderDirection);
{% endif %}
    }

    /**
     * @returns int Number of objects found.
     */
    public function count{{ remote_object.getLocalFunctionName }}Objects() : int {
        /** @var ${{ remote_object.getLocalVariable }}Service Services\{{ remote_object.getLocalClass }}Service */
        ${{ remote_object.getLocalVariable }}Service = App::Container()->get(Services\{{ remote_object.getLocalClass }}Service::class);
{% if remote_object.local_model_key == 'id' %}
        return ${{ remote_object.getLocalVariable }}Service->countById($this->{{ column.getLocalBoundColumnGetter }}());
{% else %}
        return ${{ remote_object.getLocalVariable }}Service->countByField('{{ remote_object.getLocalBoundColumn }}', $this->{{ remote_object.getRemoteBoundColumnGetter }}());
{% endif %}
    }

{% endfor %}
{% endif %}

    /**
     * @returns {{ class_name }}Model
     */
    public function save()
    {
        /** @var $tableGateway TableGateways\{{ class_name }}TableGateway */
        $tableGateway = App::Container()->get(TableGateways\{{ class_name }}TableGateway::class);
        return $tableGateway->save($this);
    }

    /**
     * Destroy the current record.
     *
     * @return int Number of affected rows.
     */
    public function destroy()
    {
        /** @var $tableGateway TableGateways\{{ class_name }}TableGateway */
        $tableGateway = App::Container()->get(TableGateways\{{ class_name }}TableGateway::class);
        return $tableGateway->delete($this->getPrimaryKeys());
    }

    /**
     * Destroy the current record, and any dependencies upon it, recursively.
     *
     * @return int Number of affected models.
     */
    public function destroyThoroughly(){
        $countOfThingsDestroyed = 0;
        $thingsToDestroy = [];
{% for remote_object in remote_objects %}
        ${{ remote_object.getLocalFunctionName }}Objects = $this->fetch{{ remote_object.getLocalFunctionName }}Objects();
        if ( is_array(${{ remote_object.getLocalFunctionName }}Objects) ) {
            $thingsToDestroy = array_merge($thingsToDestroy, ${{ remote_object.getLocalFunctionName }}Objects);
        }
{% endfor %}
        if(count($thingsToDestroy) > 0){
            foreach($thingsToDestroy as $thingToDestroy){
                /** @var $thingToDestroy ModelInterface */
                $countOfThingsDestroyed+= $thingToDestroy->destroyThoroughly();
            }
        }
        $this->destroy();
        $countOfThingsDestroyed++;
        return $countOfThingsDestroyed;
    }


    /**
     * Provides an array of all properties in this model.
     * @returns array
     */
    public function getListOfProperties()
    {
        return [
{% for column in columns %}
            '{{ column.getField }}',
{% endfor %}
        ];
    }
}