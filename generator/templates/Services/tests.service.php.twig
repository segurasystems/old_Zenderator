<?php
namespace {{ namespace }}\Test\Services\Generated;

use \{{ app_container }} as App;
use \{{ namespace }}\TableGateways\{{ class_name }}TableGateway;
use \{{ namespace }}\Services\{{ class_name }}Service;
use \{{ namespace }}\Models\{{ class_name }}Model;

class {{ class_name }}Test extends \Segura\AppCore\Test\BaseTestCase
{
    public static function setUpBeforeClass()
    {
        ${{ variable_name }}TableGateway = App::Container()->get({{ class_name }}TableGateway::class);
        parent::setUpBeforeClass();

        for($i = 0; $i <= 5; $i++){
            ${{ variable_name }}TableGateway
                ->getNewMockModelInstance()
                ->save();
        }
    }

    public function testGetNewModelInstance()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            ${{ variable_name }}Service->getNewModelInstance()
        );
    }

    /**
     * @large
     */
    public function testGetAll()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $all = ${{ variable_name }}Service->getAll();
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            reset($all)
        );
    }

    public function testGetRandom()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);

        $random = ${{ variable_name }}Service->getRandom();
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $random
        );

        return $random;
    }

    /**
     * @depends testGetRandom
     */
    public function testGetById({{ class_name }}Model $random)
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $found = ${{ variable_name }}Service->getById($random->getId());
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $found
        );
        $this->assertEquals($random, $found);
    }

    /**
     * @depends testGetRandom
     */
    public function testCreateFromArray({{ class_name }}Model $random)
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            ${{ variable_name }}Service->createFromArray($random->__ToArray())
        );
    }

    public function testGetMockObject()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            ${{ variable_name }}Service->getMockObject()
        );
    }

    /**
     * @depends testGetRandom
     */
    public function testGetByField({{ class_name }}Model $random)
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
{% for column in columns %}
        $found = ${{ variable_name }}Service->getByField('{{ column.field }}', $random->get{{ column.field }}());
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $found
        );
{% endfor %}
    }

    /**
     * @depends testGetRandom
     */
    public function testGetManyByField({{ class_name }}Model $random)
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
{% for column in columns %}
        $found = ${{ variable_name }}Service->getManyByField('{{ column.field }}', $random->get{{ column.field }}());
        $this->assertContainsOnlyInstancesOf(
            {{ class_name }}Model::class,
            $found
        );
{% endfor %}
    }

    public function testDeleteById()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        ${{ variable_name }}TableGateway = App::Container()->get({{ class_name }}TableGateway::class);

        $deletable = ${{ variable_name }}TableGateway
            ->getNewMockModelInstance()
            ->save();

        $this->assertEquals(1, ${{ variable_name }}Service->deleteById($deletable->getId()));

        return $deletable;
    }

    /**
     * @depends testDeleteById

     */
    public function testDeleteByIdVerify({{ class_name }}Model $deleted)
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertEquals(null, ${{ variable_name }}Service->getById($deleted->getId()));
    }

    public function testGetTermPlural()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertNotEmpty(${{ variable_name }}Service->getTermPlural());
    }

    public function testGetTermSingular()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertNotEmpty(${{ variable_name }}Service->getTermSingular());
    }
}
