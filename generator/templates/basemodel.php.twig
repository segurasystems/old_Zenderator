<?php
namespace {{ namespace }}\Models\Base;
use \{{ app_container }} as App;
use \{{ namespace }}\{{ namespace }};
use \Zenderator\Abstracts\Model as AbstractModel;
use \{{ namespace }}\Services;
use \{{ namespace }}\Models;
use \{{ namespace }}\TableGateways;
use \{{ namespace }}\Models\{{ class_name }}Model;

abstract class Base{{ class_name }}Model extends AbstractModel
{

{% if primary_keys %}
    protected $_primary_keys = ['{{ primary_keys|join('\', \'')|raw }}'];
{% endif %}

{% for column in columns %}
{% if column.default_value %}
    protected ${{ column.field }} = '{{ column.default_value }}';
{% else %}
    protected ${{ column.field }};
{% endif %}
{% endfor %}

{% for column in columns %}
    protected $original_{{ column.field }};
{% endfor %}

    /**
     * @returns {{ class_name }}Model
     */
    static public function factory()
    {
        return parent::factory();
    }

{% for column in columns %}
    /**
     * @returns {{ column.phptype }}
     */
    public function get{{ column.field }}() {% if column.phptype %}{# Sadly can't use this until nullable return types turns up. : {{ column.phptype }} #}{% endif %}
    {
        return $this->{{ column.field }};
    }

    /**
     * @returns {{ class_name }}Model
     */
    public function set{{ column.field }}({{ column.phptype }} ${{ column.field }} = null)
    {
        $this->{{ column.field }} = ${{ column.field }};
        return $this;
    }

{% if 'constraints' in column|keys %}
    /**
     * @returns Models\{{ column.constraints.remote_model_class }}Model
     */
    public function fetch{{ column.field }}Object() : Models\{{ column.constraints.remote_model_class }}Model
    {
        ${{ column.constraints.remote_model_class }}Service = App::Container()->get(Services\{{ column.constraints.remote_model_class }}Service::class);
        #${{ column.constraints.remote_model_class }}Service = new Services\{{ column.constraints.remote_model_class }}Service();
{% if column.constraints.remote_model_key == 'id' %}
        return ${{ column.constraints.remote_model_class }}Service->getById($this->get{{ column.field }}());
{% else %}
        return ${{ column.constraints.remote_model_class }}Service->getByField('{{ column.constraints.remote_model_key }}', $this->get{{ column.field }}());
{% endif %}
    }

{% endif %}
{% endfor %}

    /**
     * @returns {{ class_name }}Model
     */
    public function save()
    {
        /** @var $tableGateway TableGateways\{{ class_name }}TableGateway */
        $tableGateway = App::Container()->get(TableGateways\{{ class_name }}TableGateway::class);
        return $tableGateway->save($this);
    }

    /**
     * Destroy the current record.
     *
     * @return int Number of affected rows.
     */
    public function destroy()
    {
        /** @var $tableGateway TableGateways\{{ class_name }}TableGateway */
        $tableGateway = App::Container()->get(TableGateways\{{ class_name }}TableGateway::class);
        return $tableGateway->delete($this->getPrimaryKeys());
    }

    /**
     * Provides an array of all properties in this model.
     * @returns array
     */
    public function getListOfProperties()
    {
        return [
{% for column in columns %}
            '{{ column.field }}',
{% endfor %}
        ];
    }
}